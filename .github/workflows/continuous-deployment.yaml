name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    branches: ["main"]
    types: ["completed"]

jobs:
  has_next_version:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      HasNextVersion: ${{ steps.get_next_version.outputs.hasNextVersion }}
      Version: ${{ steps.get_next_version.outputs.version }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get next version
        id: get_next_version
        uses: thenativeweb/get-next-version@2.6.3

      - name: Tag new version
        if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
        shell: pwsh
        run: |
          $nextVersion = '${{ steps.get_next_version.outputs.version }}'
          git tag $nextVersion
          git push origin $nextVersion

  package:
    runs-on: ubuntu-latest
    needs: has_next_version
    if: ${{ needs.has_next_version.outputs.HasNextVersion == 'true' }}

    env:
      Version: ${{ needs.has_next_version.outputs.Version }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup node 20.x
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Build for production
        run: |
          npm install
          npm version ${{ env.Version }} --allow-same-version --no-git-tag-version
          npm run build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: simple-trading
          path: ./dist

  deploy:
    runs-on: ubuntu-latest
    needs: package
    environment:
      name: Production
    permissions:
      id-token: write

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: simple-trading
          path: ./

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: "Deploy client app"
        uses: azure/CLI@v2
        with:
          azcliversion: latest
          inlineScript: |
            az storage blob delete-batch --account-name "$CLIENT_APP_STORAGE_ACCOUNT" --source '$web' --pattern '*'
            az storage blob upload-batch --account-name "$CLIENT_APP_STORAGE_ACCOUNT" --destination '$web' --source ./simple-trading/browser --overwrite

            # set cache-control header for index.html only by re-uploading it with the --content-cache option
            az storage blob upload --account-name "$CLIENT_APP_STORAGE_ACCOUNT" --container-name '$web' --file ./simple-trading/browser/index.html --name index.html --content-cache 'no-cache' --overwrite
        env:
          CLIENT_APP_STORAGE_ACCOUNT: ${{ vars.CLIENT_APP_STORAGE_ACCOUNT }}
